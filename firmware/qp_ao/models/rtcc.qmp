<?xml version="1.0" encoding="UTF-8"?>
<package name="RTCC" stereotype="0x04" namespace="RTCC::">
 <package name="QHSMs" stereotype="0x02" namespace="HSM::">
  <class name="Alarm" superclass="qpcpp::QHsm">
   <documentation>A state machine to handle arming and reacting to alarms.</documentation>
   <attribute name="mID" type="unsigned int" visibility="0x02" properties="0x00">
    <documentation>The ID representing the alarm when multiple alarm HSMs are supported.</documentation>
   </attribute>
   <attribute name="mOwner" type="QP::QActive&amp;" visibility="0x02" properties="0x00">
    <documentation>Owner of this HSM.</documentation>
   </attribute>
   <attribute name="mDeferredEventQueueSto[4] {}" type="const QP::QEvt*" visibility="0x02" properties="0x00"/>
   <attribute name="mDeferredEventQueue {}" type="QP::QMActive" visibility="0x02" properties="0x00">
    <documentation>The queue of deferred events.</documentation>
   </attribute>
   <operation name="Alarm" type="" visibility="0x00" properties="0x00">
    <specifiers>noexcept</specifiers>
    <documentation>Ctor.</documentation>
    <parameter name="aID" type="const unsigned int"/>
    <parameter name="aOwner" type="QP::QActive&amp;"/>
    <code>    : QP::QActive{Q_STATE_CAST(&amp;RTCC::HSM::Alarm::initial)}
    , mOwner{aOwner}

// Ctor body.</code>
   </operation>
   <statechart properties="0x00">
    <documentation>One-shot alarm state.</documentation>
    <initial target="../1">
     <action brief="Init();">// Initialize the QF queue for deferred feed requests.
mDeferredEventQueue.init(mDeferredEventQueueSto, Q_DIM(mDeferredEventQueueSto));</action>
     <initial_glyph conn="4,20,5,0,6,4">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Idle">
     <documentation>Idle state.</documentation>
     <tran trig="RTCC_SET_ONE_SHOT_ALARM" target="../../2/2">
      <tran_glyph conn="20,24,0,3,-4,28">
       <action box="0,-6,26,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RTCC_SET_PERIODIC_ALARM" target="../../2/3">
      <tran_glyph conn="20,42,2,3,4,28">
       <action box="0,2,25,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,24,22,18"/>
    </state>
    <state name="Armed">
     <documentation>Alarm armed superstate.</documentation>
     <tran trig="ALARM_CLEAR" target="../../1">
      <action brief="Recall();">mOwner-&gt;recall(&amp;mDeferredEventQueue);</action>
      <tran_glyph conn="44,36,3,1,-18">
       <action box="-17,-2,20,4"/>
      </tran_glyph>
     </tran>
     <tran trig="TERMINATE">
      <tran_glyph conn="74,8,0,-1,-4,6">
       <action box="0,-6,10,2"/>
      </tran_glyph>
     </tran>
     <state name="OneShot">
      <tran trig="RTC_SET_ALARM">
       <action brief="Defer();">if (mOwner-&gt;defer(&amp;mDeferredEventQueue, e)) {
    // Event deferred: log event.
}
else {
    // Event NOT deferred because of no room in the defer queue: Log event.
}
</action>
       <tran_glyph conn="48,26,3,-1,24">
        <action box="0,-2,25,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="48,14,28,18"/>
     </state>
     <state name="Periodic">
      <documentation>Periodic alarm state.</documentation>
      <state_glyph node="48,40,28,18"/>
     </state>
     <state_glyph node="44,8,36,54"/>
    </state>
    <state_diagram size="86,72"/>
   </statechart>
  </class>
 </package>
 <package name="AOs" stereotype="0x02" namespace="AO::">
  <class name="Mgr" superclass="qpcpp::QActive">
   <documentation>RTCC Active Object.
Uses signals from an RTCC component to maintain date and time.

Can perform various other tasks like saving to Non-Volatile memory and read temperature (if so equipped).
</documentation>
   <attribute name="mTime {}" type="std::chrono::minutes" visibility="0x02" properties="0x00">
    <documentation>Holder for RTCC time.
</documentation>
   </attribute>
   <attribute name="mDate {}" type="std::chrono::year_month_day" visibility="0x02" properties="0x00">
    <documentation>Holder for RTCC date.
</documentation>
   </attribute>
   <attribute name="mTemperature {-1000.0}" type="float" visibility="0x02" properties="0x00">
    <documentation>Holder for RTCC temperature.
</documentation>
   </attribute>
   <attribute name="mRTCC {}" type="std::shared_ptr&lt;IRTCC&gt;" visibility="0x02" properties="0x00">
    <documentation>Reference to a IRTCC-compatible interface.
</documentation>
   </attribute>
   <attribute name="mITemperature {}? 0" type="std::shared_ptr&lt;ITemperature&gt;" visibility="0x02" properties="0x00">
    <documentation>Reference to a ITemperature-compatible interface.</documentation>
   </attribute>
   <attribute name="mNVMem {}? 0" type="std::shared_ptr&lt;INVMem&gt;" visibility="0x02" properties="0x00">
    <documentation>Reference to object implementing INVMem interface.</documentation>
   </attribute>
   <attribute name="mCalendarRec {}? 0" type="std::shared_ptr&lt;CalendarRec&gt;" visibility="0x02" properties="0x00">
    <documentation>Pointer to CalendarRec object.
</documentation>
   </attribute>
   <attribute name="mNVMemBuf {}? 0" type="std::unique_ptr&lt;uint8_t []&gt;" visibility="0x02" properties="0x00">
    <documentation>Pointer to the non-volatile memory buffer.</documentation>
   </attribute>
   <attribute name="mAlarms" type="std::vector&lt;RTCC::HSM::Alarm&gt;" visibility="0x00" properties="0x00">
    <documentation>An array holding the holding the orthogonal HSM Alarm componnents.</documentation>
   </attribute>
   <operation name="Mgr" type="" visibility="0x00" properties="0x00">
    <documentation>Ctor.
</documentation>
    <parameter name="aRTCC" type="std::shared_ptr&lt;IRTCC&gt;"/>
    <parameter name="aTemperature" type="std::shared_ptr&lt;ITemperature&gt;"/>
    <parameter name="aNVMem" type="std::shared_ptr&lt;INVMem&gt;"/>
    <parameter name="aCalendarRec" type="std::shared_ptr&lt;CalendarRec&gt;"/>
    <code>    : QP::QActive(Q_STATE_CAST(&amp;RTCC::AO::Mgr::initial))
    , mRTCC{std::move(aRTCC)}
    //, mITemperature{std::move(aTemperature)}
    //, mNVMem{std::move(aNVMem)}
    //, mCalendarRec{std::move(aCalendarRec)}

// Ctor body left empty.</code>
   </operation>
   <operation name="GetTemperature? 0" type="float" visibility="0x00" properties="0x02">
    <specifiers>const</specifiers>
    <documentation>Returns the last snapshot of temperature if available.
If not returns 0.0.
</documentation>
    <code>return mTemperature;</code>
   </operation>
   <operation name="GetTime? 0" type="std::chrono::minutes const &amp;" visibility="0x00" properties="0x02">
    <specifiers>const</specifiers>
    <documentation>Returns the last snapshot of Time readout.
</documentation>
    <code>return mTime;</code>
   </operation>
   <operation name="GetDate" type="std::chrono::year_month_day? 0" visibility="0x00" properties="0x02">
    <specifiers>const</specifiers>
    <documentation>Returns the last snapshot of Date readout.
</documentation>
    <code>return mDate;</code>
   </operation>
   <operation name="InitDB? 0" type="void" visibility="0x02" properties="0x00">
    <documentation>Initializes the DB, from NV memory if available, or to default if not.</documentation>
    <code>if (auto const lNVMemSize{mNVMem-&gt;GetNVMemSize()}; lNVMemSize) {
    mNVMemBuf = std::make_unique&lt;uint8_t []&gt;(lNVMemSize);
    auto const lDBSize = DBRec::GetDBSize();
    mNVMem-&gt;RdFromNVMem(mNVMemBuf.get(), 0, lDBSize);
    DBRec::DeserializeDB(mNVMemBuf.get());
    if (!DBRec::IsDBSane()) {
        // Reset defaults and write back to NV mem.
        DBRec::ResetDBDflt();
        WrToNVMem();
    }
} else {
    DBRec::ResetDBDflt();
}
</code>
   </operation>
   <operation name="InitCalendar? 0" type="void" visibility="0x02" properties="0x00">
    <documentation>Initializes the calendar record.</documentation>
    <code>// -Get current time &amp; date, temperature.
// -Read config from RTCC sram.
// -Populate calendar.
// -Set next alarm.
mRTCC-&gt;RdTimeAndDate(mTime, mDate);
mTemperature = mITemperature-&gt;GetTemperature();

// Set some defaults if required.
if (!mCalendarRec-&gt;IsSane()) {
    mCalendarRec-&gt;ResetDflt();
}

// Check if a Calendar object was passed.
// If not, create one locally,
#ifdef RTCC_CALENDAR_DBG
mCalendarRec-&gt;ClrAllEntries();
#endif // RTCC_CALENDAR_DBG

SetNextCalendarEvent();

// If you haven't passed a Calendar record,
// no alarms will be set.
</code>
   </operation>
   <operation name="WrToNVMem? 0" type="void" visibility="0x02" properties="0x00">
    <documentation>Write buffer to NV memory.</documentation>
    <code>if (DBRec::IsDBDirty()) {
    auto const lDBSize{DBRec::GetDBSize()};
    DBRec::StaticUpdateCRC();
    DBRec::SerializeDB(mNVMemBuf.get());
    mNVMem-&gt;WrToNVMem(mNVMemBuf.get(), 0, lDBSize);
}
</code>
   </operation>
   <operation name="SetNextCalendarEvent? 0" type="void" visibility="0x02" properties="0x00">
    <code>Weekday lCurrentWeekday{mDate.GetWeekdayName()};

#ifdef RTCC_CALENDAR_DBG
lAlarmTime = mTime;
unsigned int lMinutes = mTime.GetMinutes() + 15;
unsigned int lHours   = mTime.GetHours();
if (lMinutes &gt;= 60) {
    lMinutes %= 60;
    lHours++;
    if (lHours &gt;= 24) {
        lHours = 0;
    }
}
lAlarmTime.SetMinutes(lMinutes);
lAlarmTime.SetHours(lHours);
mCalendarPtr-&gt;SetEntry(lCurrentWeekday, lAlarmTime);
#endif // RTCC_CALENDAR_DBG

auto const lNextEntry{
    mCalendarRec-&gt;GetNextEntry(lCurrentWeekday, mTime)
};

if (lNextEntry) {
    // Entry found: set alarm.
    mRTCC-&gt;WrAlarm(lNextEntry.value().first, lNextEntry.value().second);
} else {
    // No next entry found:
    // clear current alarm so it does not generate an interrupt anymore.
    mRTCC-&gt;DisableAlarm();
}
</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action brief="Init();">static_cast&lt;void&gt;(e);
mRTCC-&gt;Init();

// Subscribe to signals if any.
subscribe(RTCC_INTERRUPT_SIG);
subscribe(RTCC_SET_DATE_SIG);
subscribe(RTCC_SET_TIME_SIG);
subscribe(RTCC_SET_TIME_AND_DATE_SIG);
//subscribe(RTCC_SAVE_TO_NV_MEMORY_SIG);
subscrube(RTCC_SET_TIME_ALARM_SIG);

// Init database and calendar.
//InitDB();
//InitCalendar();

// Set logging category.
//LOGGER.AddCategory(RTCC_LOG, &amp;sLogCategory[0]);
</action>
     <initial_glyph conn="4,4,5,0,6,6">
      <action box="0,-2,12,2"/>
     </initial_glyph>
    </initial>
    <state name="Running">
     <documentation>The top Running state.</documentation>
     <entry brief="EnableInterrupts();">mRTCC-&gt;SetInterrupt(true);</entry>
     <exit brief="DisableInterrupts();">mRTCC-&gt;SetInterrupt(false);</exit>
     <tran trig="TERMINATE">
      <tran_glyph conn="70,10,0,-1,-6,6">
       <action box="0,-8,10,4"/>
      </tran_glyph>
     </tran>
     <tran trig="RTCC_SET_TIME">
      <action brief="SetTime(aTime);">//LOG_INFO(&amp;sLogCategory[0], &quot;New time set.&quot;);
const auto lSetTimeEvent {static_cast&lt;const RTCC::Event::TimeAndDate*&gt;(e)};
mRTCC-&gt;WrTime(lSetTimeEvent-&gt;mTime);
//mRTCC-&gt;GetTimeAndDate(mTime, mDate);

//SetNextCalendarEvent();
</action>
      <tran_glyph conn="4,20,3,-1,46">
       <action box="0,-2,36,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RTCC_SET_DATE">
      <action brief="SetDate(aDate);">//LOG_INFO(&amp;sLogCategory[0], &quot;New date set.&quot;);
const auto lSetEventDate {static_cast&lt;const RTCC::Event::TimeAndDate*&gt;(e)};
mRTCC-&gt;WrDate(lSetEventDate-&gt;mDate);
//mRTCC-&gt;GetTimeAndDate(mTime, mDate);

//SetNextCalendarEvent();
</action>
      <tran_glyph conn="4,24,3,-1,46">
       <action box="0,-2,36,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RTCC_INTERRUPT">
      <action brief="ReadTimeAndDate(); ^RTCC_TICK">// Set data as impure to force refresh of data read from RTCC.
mRTCC-&gt;SetImpure();
mRTCC-&gt;GetTimeAndDate(mTime, mDate);
//mTemperature = mITemperature-&gt;GetTemperature();

// Publish Tick Alarm Event.
const auto lTimeandDataEvent {
    Q_NEW(
        RTCC::Event::TimeAndDate,
        RTCC_TICK_SIG,
        mTime,
        mDate
    )
};
QP::QF::PUBLISH(lTimeandDataEvent, this);

const bool lIsCalendarAlarm {mRTCC-&gt;IsAlarmOn()};
mRTCC-&gt;AckInterrupt();
</action>
      <choice>
       <action brief="DoNothing();">#if 0
// Got a calendar event alarm: create event.
// Set next calendar alarm event.
//LOG_INFO(&amp;sLogCategory[0], &quot;Calendar event.&quot;);
// Check the alarm that triggered and its context (callback + param).
const auto lCalendarEvent {
    Q_NEW(
        RTCC::Event::Alarm,
        RTCC_ALARM_SIG,
        mTime,
        mDate,
        nullptr,
        nullptr
    )
};
QP::QF::PUBLISH(lCalendarEvent, this);
#endif
//SetNextCalendarEvent();
</action>
       <choice_glyph conn="50,40,5,-1,22">
        <action box="1,0,28,4"/>
       </choice_glyph>
      </choice>
      <tran_glyph conn="4,40,3,-1,46">
       <action box="0,-2,44,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RTCC_SET_TIME_AND_DATE">
      <action brief="SetTimeAndDate(aTime, aDate)">const auto lSetTimeEvent {static_cast&lt;const RTCC::Event::TimeAndDate*&gt;(e)};
mRTCC-&gt;WrTimeAndDate(lSetTimeEvent-&gt;mTime, lSetTimeEvent-&gt;mDate);
//mRTCC-&gt;GetTimeAndDate(mTime, mDate);

//SetNextCalendarEvent();
</action>
      <tran_glyph conn="4,28,3,-1,46">
       <action box="0,-2,46,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RTCC_SET_ONE_SHOT_ALARM, RTCC_PERIODIC_ALARM">
      <action brief="Dispatch();">const auto lAlarmEvt {static_cast&lt;RTCC::Event::AlarmBase&gt;(e)};
mAlarms.at(lAlarmEvt-&gt;mID).dispatch(e);</action>
      <tran_glyph conn="4,32,3,-1,68">
       <action box="0,-2,60,2"/>
      </tran_glyph>
     </tran>
     <tran trig="ALARM_CLEAR">
      <action brief="Clear();"/>
      <tran_glyph conn="4,36,3,-1,46">
       <action box="0,-2,40,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,10,72,42">
      <entry box="1,2,23,2"/>
      <exit box="1,4,23,2"/>
     </state_glyph>
    </state>
    <state_diagram size="80,56"/>
   </statechart>
  </class>
 </package>
 <package name="Events" stereotype="0x01" namespace="Event::">
  <class name="Init? 0" superclass="qpcpp::QEvt">
   <documentation>Event for the pseudo-init event.</documentation>
   <attribute name="mCalendarRec" type="const std::shared_ptr&lt;CalendarRec&gt;" visibility="0x00" properties="0x00">
    <documentation>Pointer to calendar record.</documentation>
   </attribute>
   <operation name="Init" type="" visibility="0x00" properties="0x02">
    <documentation>Ctor.</documentation>
    <parameter name="aSignal" type="QP::QSignal const"/>
    <parameter name="aCalendarRec" type="const std::shared_ptr&lt;CalendarRec&gt; &amp;"/>
    <code>    : QP::QEvt(aSignal)
    , mCalendarRec(aCalendarRec)
// Ctor left empty.</code>
   </operation>
  </class>
  <class name="TimeAndDate" superclass="qpcpp::QEvt">
   <documentation>Event to propagate a new Time and Date.</documentation>
   <attribute name="mTime" type="std::chrono::minutes" visibility="0x00" properties="0x00">
    <documentation>The new Time to propagate.</documentation>
   </attribute>
   <attribute name="mDate" type="std::chrono::year_month_day" visibility="0x00" properties="0x00">
    <documentation>The new Date to propagate.</documentation>
   </attribute>
  </class>
  <class name="AlarmTime" superclass="qpcpp::QEvt">
   <documentation>Sets the alarm with the help of a function to get the time.</documentation>
   <attribute name="mID" type="unsigned int" visibility="0x00" properties="0x00">
    <documentation>A unique identifier to associate with an alarm caller.</documentation>
   </attribute>
   <attribute name="mRate" type="eAlarmRate" visibility="0x00" properties="0x00">
    <documentation>The period of the alarm to set.</documentation>
   </attribute>
   <attribute name="mIsSelfCleared" type="bool" visibility="0x00" properties="0x00">
    <documentation>Flag to set if the alarm should clear itself once triggered.</documentation>
   </attribute>
   <attribute name="mParam" type="const void*" visibility="0x00" properties="0x00">
    <documentation>The parameter to pass to the function.</documentation>
   </attribute>
   <attribute name="(*mGetAlarmTimeFct)(void*, const std::chrono::seconds aTime)" type="std::optional&lt;std::chrono::seconds&gt;" visibility="0x00" properties="0x00">
    <documentation>The helper function to determine the alarm time.</documentation>
   </attribute>
  </class>
  <class name="AlarmFired" superclass="qpcpp::QEvt">
   <documentation>The event when an  alarm is fired.</documentation>
   <attribute name="mID" type="unsigned int" visibility="0x00" properties="0x00">
    <documentation>A unique identifier to associate with an alarm caller.</documentation>
   </attribute>
   <attribute name="mTime" type="std::chrono::minutes" visibility="0x00" properties="0x00">
    <documentation>The time at which the alarm was fired.</documentation>
   </attribute>
  </class>
  <class name="SaveToRAM? 0" superclass="qpcpp::QEvt">
   <documentation>Signals the RTCC's RAM is to be saved.</documentation>
   <attribute name="mIsDataImpure" type="bool const" visibility="0x00" properties="0x00">
    <documentation>Data is impure, ready to be saved again.</documentation>
   </attribute>
   <operation name="SaveToRAM" type="explicit" visibility="0x00" properties="0x02">
    <specifiers>noexcept</specifiers>
    <documentation>Ctor.</documentation>
    <parameter name="aSignal" type="QP::QSignal const"/>
    <parameter name="aIsDataImpure" type="bool const"/>
    <code>    : QP::QEvt(aSignal)
    , mIsDataImpure(aIsDataImpure)
// Ctor left empty.</code>
   </operation>
   <operation name="SaveToRAM" type="explicit constexpr" visibility="0x00" properties="0x02">
    <specifiers>noexcept</specifiers>
    <documentation>Ctor (overload for static events).

Pass QP::QEvt::StaticEvt::STATIC_EVT for aStatic parameter.</documentation>
    <parameter name="aSignal" type="QP::QSignal const"/>
    <parameter name="aIsDataImpure" type="bool const"/>
    <parameter name="aStaticEvtFlag" type="QP::QEvt::StaticEvt const"/>
    <code>    : QP::QEvt(aSignal, aStaticEvtFlag)
    , mIsDataImpure(aIsDataImpure)
// Ctor left empty.</code>
   </operation>
  </class>
 </package>
 <directory name="../codegen">
  <file name="RTCC_Events.h">
   <text>#ifndef RTCC__EVENTS_H_
#define RTCC__EVENTS_H_

// QP.
#include &lt;qpcpp.hpp&gt;


enum class eAlarmRate
{
    OncePerSecond,
    SecondsMatch,
    MinutesSecondMatch,
    HoursMinutesSecondsMatch,
    DateHoursMinutesSecondsMatch,
    DayHoursMinutesSecondsMatch,
    OncePerMinute,
    MinutesMatch,
    HoursMinutesMatch,
    DateHoursMinutesMatch,
    DayHoursMinutesMatch
};

$declare${RTCC::Events::TimeAndDate}
$declare${RTCC::Events::AlarmTime}
$declare${RTCC::Events::AlarmFired}

#endif // RTCC__EVENTS_H_
</text>
  </file>
  <file name="RTCC_AOs.h">
   <text>#include &quot;qpcpp.h&quot;

#include &lt;memory&gt;

// Forward declaration.
class IRTCC;
class INVMem;
class ITemperature;
class CalendarRec;

$declare${RTCC::AOs::RTCC_AO}
</text>
  </file>
  <file name="RTCC_AOs.cpp">
   <text>#include &lt;cstring&gt;
#include &lt;db/CalendarRec.h&gt;
#include &quot;IRTCC.h&quot;
#include &quot;INVMem.h&quot;
#include &quot;ITemperature.h&quot;

#include &quot;Signals.h&quot;
#include &quot;RTCC_Events.h&quot;
#include &quot;RTCC_AOs.h&quot;

$define${RTCC::AOs::RTCC_AO}
</text>
  </file>
 </directory>
</package>
