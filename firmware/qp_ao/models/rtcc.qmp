<?xml version="1.0" encoding="UTF-8"?>
<package name="RTCC" stereotype="0x04" namespace="RTCC::">
 <package name="QHSMs" stereotype="0x02" namespace="HSM::">
  <class name="Alarm" superclass="qpcpp::QHsm">
   <documentation>A state machine to handle arming and reacting to alarms.</documentation>
   <attribute name="mID" type="unsigned int" visibility="0x02" properties="0x00">
    <documentation>The ID representing the alarm when multiple alarm HSMs are supported.</documentation>
   </attribute>
   <attribute name="mOwner" type="QP::QActive&amp;" visibility="0x02" properties="0x00">
    <documentation>Owner of this HSM.</documentation>
   </attribute>
   <attribute name="mDeferredEventQueueSto[4] {}" type="const QP::QEvt*" visibility="0x02" properties="0x00"/>
   <attribute name="mDeferredEventQueue {}" type="QP::QMActive" visibility="0x02" properties="0x00">
    <documentation>The queue of deferred events.</documentation>
   </attribute>
   <operation name="Alarm" type="" visibility="0x00" properties="0x00">
    <specifiers>noexcept</specifiers>
    <documentation>Ctor.</documentation>
    <parameter name="aID" type="const unsigned int"/>
    <parameter name="aOwner" type="QP::QActive&amp;"/>
    <code>    : QP::QActive{Q_STATE_CAST(&amp;RTCC::HSM::Alarm::initial)}
    , mOwner{aOwner}

// Ctor body.</code>
   </operation>
   <statechart properties="0x00">
    <documentation>One-shot alarm state.</documentation>
    <initial target="../1">
     <action brief="Init();">// Initialize the QF queue for deferred feed requests.
mDeferredEventQueue.init(mDeferredEventQueueSto, Q_DIM(mDeferredEventQueueSto));</action>
     <initial_glyph conn="4,20,5,0,6,4">
      <action box="0,-2,10,2"/>
     </initial_glyph>
    </initial>
    <state name="Idle">
     <documentation>Idle state.</documentation>
     <tran trig="RTCC_SET_ONE_SHOT_ALARM" target="../../2/2">
      <tran_glyph conn="20,24,0,3,-4,28">
       <action box="0,-6,26,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RTCC_SET_PERIODIC_ALARM" target="../../2/3">
      <tran_glyph conn="20,42,2,3,4,28">
       <action box="0,2,25,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,24,22,18"/>
    </state>
    <state name="Armed">
     <documentation>Alarm armed superstate.</documentation>
     <tran trig="ALARM_CLEAR" target="../../1">
      <action brief="Recall();">mOwner-&gt;recall(&amp;mDeferredEventQueue);</action>
      <tran_glyph conn="44,36,3,1,-18">
       <action box="-17,-2,20,4"/>
      </tran_glyph>
     </tran>
     <tran trig="TERMINATE">
      <tran_glyph conn="74,8,0,-1,-4,6">
       <action box="0,-6,10,2"/>
      </tran_glyph>
     </tran>
     <state name="OneShot">
      <tran trig="RTC_SET_ALARM">
       <action brief="Defer();">if (mOwner-&gt;defer(&amp;mDeferredEventQueue, e)) {
    // Event deferred: log event.
}
else {
    // Event NOT deferred because of no room in the defer queue: Log event.
}
</action>
       <tran_glyph conn="48,26,3,-1,24">
        <action box="0,-2,25,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="48,14,28,18"/>
     </state>
     <state name="Periodic">
      <documentation>Periodic alarm state.</documentation>
      <state_glyph node="48,40,28,18"/>
     </state>
     <state_glyph node="44,8,36,54"/>
    </state>
    <state_diagram size="86,72"/>
   </statechart>
  </class>
 </package>
 <package name="AOs" stereotype="0x02" namespace="AO::">
  <class name="Mgr" superclass="qpcpp::QActive">
   <documentation>RTCC Active Object.
Uses signals from an RTCC component to maintain date and time.

Can perform various other tasks like saving to Non-Volatile memory and read temperature (if so equipped).
</documentation>
   <attribute name="mTime {}" type="std::chrono::seconds" visibility="0x02" properties="0x00">
    <documentation>Holder for RTCC time.
</documentation>
   </attribute>
   <attribute name="mDate {}" type="std::chrono::year_month_day" visibility="0x02" properties="0x00">
    <documentation>Holder for RTCC date.
</documentation>
   </attribute>
   <attribute name="mRTCC {}" type="std::unique_ptr&lt;Drivers::IRTCC&gt;" visibility="0x02" properties="0x00">
    <documentation>Reference to a IRTCC-compatible interface.
</documentation>
   </attribute>
   <attribute name="mAlarms? 0" type="std::vector&lt;RTCC::HSM::Alarm&gt;" visibility="0x00" properties="0x00">
    <documentation>An array holding the holding the orthogonal HSM Alarm componnents.</documentation>
   </attribute>
   <operation name="Mgr" type="" visibility="0x00" properties="0x00">
    <documentation>Ctor.
</documentation>
    <parameter name="aRTCC" type="std::unique_ptr&lt;Drivers::IRTCC&gt;"/>
    <code>    : QP::QActive(Q_STATE_CAST(&amp;RTCC::AO::Mgr::initial))
    , mRTCC{std::move(aRTCC)}
    //, mITemperature{std::move(aTemperature)}
    //, mNVMem{std::move(aNVMem)}
    //, mCalendarRec{std::move(aCalendarRec)}

// Ctor body left empty.</code>
   </operation>
   <operation name="SetAlarm" type="void" visibility="0x02" properties="0x00">
    <documentation>Sets an alarm from an event.</documentation>
   </operation>
   <operation name="StaticOnAlarmFired" type="bool" visibility="0x02" properties="0x01">
    <specifiers>noexcept</specifiers>
    <documentation>Function to elevate to process all internal alarms.</documentation>
    <parameter name="aParam" type="void* const"/>
    <parameter name="aAlarm" type="const Drivers::Alarm&amp;"/>
    <code>[[maybe_unused]] const auto lThis {static_cast&lt;const RTCC::AO::Mgr*&gt;(aParam)};

// With Alarm, prepare events and publish them.
static_cast&lt;void&gt;(aAlarm);
return true;</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action brief="Init();">static_cast&lt;void&gt;(e);
mRTCC-&gt;Init();

// Subscribe to signals if any.
subscribe(RTCC_INTERRUPT_SIG);
subscribe(RTCC_SET_DATE_SIG);
subscribe(RTCC_SET_TIME_SIG);
subscribe(RTCC_SET_TIME_AND_DATE_SIG);
//subscribe(RTCC_SAVE_TO_NV_MEMORY_SIG);
subscribe(RTCC_SET_ALARM_SIG);

// Init database and calendar.
//InitDB();
//InitCalendar();

// Set logging category.
//LOGGER.AddCategory(RTCC_LOG, &amp;sLogCategory[0]);
</action>
     <initial_glyph conn="4,4,5,0,6,6">
      <action box="0,-2,12,2"/>
     </initial_glyph>
    </initial>
    <state name="Running">
     <documentation>The top Running state.</documentation>
     <entry brief="EnableInterrupts();">mRTCC-&gt;SetInterrupt(true);</entry>
     <exit brief="DisableInterrupts();">mRTCC-&gt;SetInterrupt(false);</exit>
     <tran trig="TERMINATE">
      <tran_glyph conn="70,10,0,-1,-6,6">
       <action box="0,-8,10,4"/>
      </tran_glyph>
     </tran>
     <tran trig="RTCC_SET_TIME">
      <action brief="SetTime(aTime);">//LOG_INFO(&amp;sLogCategory[0], &quot;New time set.&quot;);
const auto lSetTimeEvent {static_cast&lt;const RTCC::Event::TimeAndDate*&gt;(e)};
mRTCC-&gt;WrTime(lSetTimeEvent-&gt;mTime);
//mRTCC-&gt;GetTimeAndDate(mTime, mDate);
</action>
      <tran_glyph conn="4,20,3,-1,46">
       <action box="0,-2,36,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RTCC_SET_DATE">
      <action brief="SetDate(aDate);">//LOG_INFO(&amp;sLogCategory[0], &quot;New date set.&quot;);
const auto lSetEventDate {static_cast&lt;const RTCC::Event::TimeAndDate*&gt;(e)};
mRTCC-&gt;WrDate(lSetEventDate-&gt;mDate);
//mRTCC-&gt;GetTimeAndDate(mTime, mDate);
</action>
      <tran_glyph conn="4,24,3,-1,46">
       <action box="0,-2,36,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RTCC_INTERRUPT">
      <action brief="ReadTimeAndDate(); ProcessAlarms();">// Set data as impure to force refresh of data read from RTCC.
mRTCC-&gt;ISR();
[[maybe_unused]] const auto [lTime, lDate] = mRTCC-&gt;GetTimeAndDate();

#if 0
// Publish Tick Alarm Event.
const auto lTimeandDataEvent {
    Q_NEW(
        RTCC::Event::TimeAndDate,
        RTCC_TICK_SIG,
        mTime,
        mDate
    )
};
QP::QF::PUBLISH(lTimeandDataEvent, this);

mRTCC-&gt;AckInterrupt();
#else


// Ask RTCC to process *ALL* alarms it is ownoing.
[[maybe_unused]] const auto lResult {
    mRTCC-&gt;ProcessAlarms(StaticOnAlarmFired, this)
};


#endif
</action>
      <tran_glyph conn="4,40,3,-1,46">
       <action box="0,-2,44,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RTCC_SET_TIME_AND_DATE">
      <action brief="SetTimeAndDate(aTime, aDate)">const auto lSetTimeEvent {static_cast&lt;const RTCC::Event::TimeAndDate*&gt;(e)};
mRTCC-&gt;WrTimeAndDate(lSetTimeEvent-&gt;mTime, lSetTimeEvent-&gt;mDate);
//mRTCC-&gt;GetTimeAndDate(mTime, mDate);
</action>
      <tran_glyph conn="4,28,3,-1,46">
       <action box="0,-2,46,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RTCC_SET_ALARM">
      <action brief="SetAlarm();">#if 0
const auto lAlarmTimeEvt {static_cast&lt;const RTCC::Event::AlarmTime*&gt;(e)};

const auto lNextAlarmTime {
    lAlarmTimeEvt-&gt;mGetAlarmTimeFct(lAlarmTimeEvt-&gt;mParam, mTime);
};

if (!lNextAlarmTime) {
    //return;
}

// Store the ID.

#endif</action>
      <tran_glyph conn="4,32,3,-1,46">
       <action box="0,-2,46,2"/>
      </tran_glyph>
     </tran>
     <tran trig="RTCC_CLEAR_ALARM">
      <action brief="ClearAlarm();"/>
      <tran_glyph conn="4,36,3,-1,46">
       <action box="0,-2,46,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="4,10,72,42">
      <entry box="1,2,23,2"/>
      <exit box="1,4,23,2"/>
     </state_glyph>
    </state>
    <state_diagram size="80,56"/>
   </statechart>
  </class>
 </package>
 <package name="Events" stereotype="0x01" namespace="Event::">
  <class name="Init? 0" superclass="qpcpp::QEvt">
   <documentation>Event for the pseudo-init event.</documentation>
   <attribute name="mCalendarRec" type="const std::shared_ptr&lt;CalendarRec&gt;" visibility="0x00" properties="0x00">
    <documentation>Pointer to calendar record.</documentation>
   </attribute>
   <operation name="Init" type="" visibility="0x00" properties="0x02">
    <documentation>Ctor.</documentation>
    <parameter name="aSignal" type="QP::QSignal const"/>
    <parameter name="aCalendarRec" type="const std::shared_ptr&lt;CalendarRec&gt; &amp;"/>
    <code>    : QP::QEvt(aSignal)
    , mCalendarRec(aCalendarRec)
// Ctor left empty.</code>
   </operation>
  </class>
  <class name="TimeAndDate" superclass="qpcpp::QEvt">
   <documentation>Event to propagate a new Time and Date.</documentation>
   <attribute name="mTime" type="std::chrono::minutes" visibility="0x00" properties="0x00">
    <documentation>The new Time to propagate.</documentation>
   </attribute>
   <attribute name="mDate" type="std::chrono::year_month_day" visibility="0x00" properties="0x00">
    <documentation>The new Date to propagate.</documentation>
   </attribute>
  </class>
  <class name="AlarmTime" superclass="qpcpp::QEvt">
   <documentation>Sets the alarm with the help of a function to get the time.</documentation>
   <attribute name="mID" type="unsigned int" visibility="0x00" properties="0x00">
    <documentation>A unique identifier to associate with an alarm caller.</documentation>
   </attribute>
   <attribute name="mRate" type="Drivers::Alarm::eRate" visibility="0x00" properties="0x00">
    <documentation>The period of the alarm to set.</documentation>
   </attribute>
   <attribute name="mIsSelfCleared" type="bool" visibility="0x00" properties="0x00">
    <documentation>Flag to set if the alarm should clear itself once triggered.</documentation>
   </attribute>
   <attribute name="mParam" type="const void*" visibility="0x00" properties="0x00">
    <documentation>The parameter to pass to the function.</documentation>
   </attribute>
   <attribute name="(*mGetAlarmTimeFct)(void*, const std::chrono::seconds aTime)" type="std::optional&lt;std::chrono::seconds&gt;" visibility="0x00" properties="0x00">
    <documentation>The helper function to determine the alarm time.</documentation>
   </attribute>
  </class>
  <class name="AlarmFired" superclass="qpcpp::QEvt">
   <documentation>The event when an  alarm is fired.</documentation>
   <attribute name="mID" type="unsigned int" visibility="0x00" properties="0x00">
    <documentation>A unique identifier to associate with an alarm caller.</documentation>
   </attribute>
   <attribute name="mTime" type="std::chrono::minutes" visibility="0x00" properties="0x00">
    <documentation>The time at which the alarm was fired.</documentation>
   </attribute>
  </class>
 </package>
 <directory name="../codegen">
  <file name="RTCC_Events.h">
   <text>#ifndef RTCC__EVENTS_H_
#define RTCC__EVENTS_H_

// Standard Library.
#include &lt;chrono&gt;
#include &lt;optional&gt;

// QP.
#include &lt;qpcpp.hpp&gt;

// Drivers.
#include &quot;drivers/inc/IRTCC.h&quot;


$declare${RTCC::Events::TimeAndDate}
$declare${RTCC::Events::AlarmTime}
$declare${RTCC::Events::AlarmFired}

#endif // RTCC__EVENTS_H_
</text>
  </file>
  <file name="RTCC_AOs.h">
   <text>#ifndef RTCC__AOS_MGR_H_
#define RTCC__AOS_MGR_H_

// QP.
#include &lt;qpcpp.hpp&gt;

// Standard libraries.
#include &lt;chrono&gt;
#include &lt;memory&gt;

// Firmware.
#include &quot;drivers/inc/IRTCC.h&quot;


$declare${RTCC::AOs::Mgr}

#endif // RTCC__AOS_MGR_H_
</text>
  </file>
  <file name="RTCC_AOs.cpp">
   <text>// This project.
#include &quot;qp_ao/codegen/RTCC_AOs.h&quot;
#include &quot;qp_ao/codegen/RTCC_Events.h&quot;
#include &quot;qp_ao/codegen/Signals.h&quot;

#include &quot;qp_ao/codegen/RTCC_Events.h&quot;

// Drivers.
#include &quot;drivers/inc/IMotorControl.h&quot;


$define${RTCC::AOs::Mgr}
</text>
  </file>
 </directory>
</package>
