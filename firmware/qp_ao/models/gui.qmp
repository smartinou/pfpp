<?xml version="1.0" encoding="UTF-8"?>
<package name="GUI" stereotype="0x04" namespace="GUI::" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.state-machine.com/qm/qm.xsd">
 <package name="AOs" stereotype="0x02" namespace="AO::">
  <class name="Mgr" superclass="qpcpp::QActive">
   <attribute name="m_timeEvt? 0" type="QP::QTimeEvt" visibility="0x02" properties="0x00"/>
   <attribute name="mLCD" type="std::shared_ptr&lt;Drivers::ILCD&gt;" visibility="0x02" properties="0x00">
    <documentation>The pointer on the LCD driver to use with the graphics library.</documentation>
   </attribute>
   <attribute name="mDisplayDrv" type="std::shared_ptr&lt;tDisplay&gt;" visibility="0x02" properties="0x00"/>
   <attribute name="mContext{}" type="tContext" visibility="0x02" properties="0x00">
    <documentation>Graphics lib context.</documentation>
   </attribute>
   <attribute name="mManualFeedButton" type="tPushButtonWidget" visibility="0x02" properties="0x00">
    <documentation>The push button for manual feed.</documentation>
   </attribute>
   <attribute name="mTimedFeedButton" type="tPushButtonWidget" visibility="0x02" properties="0x00">
    <documentation>The push button for timed feed.</documentation>
   </attribute>
   <operation name="Mgr" type="" visibility="0x00" properties="0x00">
    <documentation>Ctor.</documentation>
    <parameter name="aLCD" type="std::shared_ptr&lt;Drivers::ILCD&gt;"/>
    <parameter name="aDisplayDrv" type="std::shared_ptr&lt;tDisplay&gt;"/>
    <code>    : QActive(Q_STATE_CAST(&amp;Mgr::initial))
    , mLCD{std::move(aLCD)}
    , mDisplayDrv{std::move(aDisplayDrv)}
    , mManualFeedButton{
#if 0
        RectangularButtonStruct(
            nullptr, &amp;mTimedFeedButton, nullptr,
            mDisplayDrv.get(),
            40, 64, 40, 20,
            PB_STYLE_OUTLINE | PB_STYLE_TEXT,
            ClrWhite, ClrWhite, ClrBlack, ClrBlack,
            &amp;g_sFontFixed6x8, &quot;Manual Feed&quot;,
            nullptr, nullptr,
            0, 0,
            nullptr
        )
#else
        {
            sizeof(tPushButtonWidget),
            nullptr,
            nullptr,
            nullptr,
            mDisplayDrv.get(),
            {
                0, 0, 40, 40
            },
            RectangularButtonMsgProc
        }
        , PB_STYLE_OUTLINE | PB_STYLE_TEXT
        , ClrWhite, ClrWhite, ClrBlack, ClrBlack
        , &amp;g_sFontFixed6x8, &quot;Manual Feed&quot;
        , nullptr, nullptr
        , 0, 0, 0
        , nullptr
    }
#endif
    //m_timeEvt(this, TIMEOUT_SIG, 0U)

// Ctor body.</code>
   </operation>
   <operation name="OnButtonClick" type="void" visibility="0x02" properties="0x00">
    <specifiers>noexcept</specifiers>
    <documentation>The event sink called when any button clicked.</documentation>
    <parameter name="aWidget" type="tWidget* const"/>
   </operation>
   <operation name="DrawMainMenu" type="void" visibility="0x02" properties="0x00">
    <specifiers>noexcept</specifiers>
    <documentation>Draws the main menu</documentation>
    <code>static tContainerWidget sTopContainer{
    {
        sizeof(tContainerWidget),
        nullptr,
        nullptr,
        nullptr,
        mDisplayDrv.get(),
        {
            5, 5, 122, 122
        },
        ContainerMsgProc
    },
    CTR_STYLE_OUTLINE | CTR_STYLE_TEXT | CTR_STYLE_TEXT_OPAQUE,
    ClrBlack, ClrWhite, ClrWhite,
    &amp;g_sFontFixed6x8,
    &quot;Main Menu&quot;
};

auto lDoNothing{
    [](tWidget* const /*psWidget*/) noexcept
    {
        // Send event for manual feed.
        // In fact, should hold, so how to manage this?
    }
};

static const std::array&lt;tPushButtonWidget, 3&gt; sFeedButtons{
    {
        {
            {
                sizeof(tPushButtonWidget),
                reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tContainerWidget*&gt;(&amp;sTopContainer)),
                reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tPushButtonWidget*&gt;(&amp;sFeedButtons[1])),
                nullptr,
                mDisplayDrv.get(),
                {
                    20, 20, 100, 40
                },
                RectangularButtonMsgProc
            },
            PB_STYLE_OUTLINE | PB_STYLE_TEXT | PB_STYLE_PRESSED,
            ClrBlack, ClrWhite, ClrWhite, ClrWhite,
            &amp;g_sFontFixed6x8,
            &quot;Hold to Feed&quot;,
            nullptr, nullptr,
            0, 0, 0,
            lDoNothing
        },
        {
            {
                sizeof(tPushButtonWidget),
                reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tContainerWidget*&gt;(&amp;sTopContainer)),
                reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tPushButtonWidget*&gt;(&amp;sFeedButtons[2])),
                nullptr,
                mDisplayDrv.get(),
                {
                    20, 60, 100, 80
                },
                RectangularButtonMsgProc
            },
            PB_STYLE_OUTLINE | PB_STYLE_TEXT,
            ClrBlack, ClrWhite, ClrWhite, ClrWhite,
            &amp;g_sFontFixed6x8,
            &quot;Timed Feed&quot;,
            nullptr, nullptr,
            0, 0, 0,
            lDoNothing
        },
        {
            {
                sizeof(tPushButtonWidget),
                reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tContainerWidget*&gt;(&amp;sTopContainer)),
                nullptr,
                nullptr,
                mDisplayDrv.get(),
                {
                    20, 80, 100, 100
                },
                RectangularButtonMsgProc
            },
            PB_STYLE_OUTLINE | PB_STYLE_TEXT,
            ClrBlack, ClrWhite, ClrWhite, ClrWhite,
            &amp;g_sFontFixed6x8,
            &quot;Config Menu&quot;,
            nullptr, nullptr,
            0, 0, 0,
            lDoNothing
        }
    }
};

sTopContainer.sBase.psChild = reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tPushButtonWidget*&gt;(&amp;sFeedButtons[0]));

WidgetPaint(reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tContainerWidget*&gt;(&amp;sTopContainer)));
PushButtonOutlineOn(const_cast&lt;tPushButtonWidget*&gt;(&amp;sFeedButtons[0]));
static const QP::QEvt sDrawEvent{GUI_DRAW_SIG};
POST(&amp;sDrawEvent, this);
</code>
   </operation>
   <operation name="DrawConfigMenu" type="void" visibility="0x02" properties="0x00">
    <specifiers>noexcept</specifiers>
    <documentation>Draws the config menu</documentation>
    <code>static tContainerWidget sTopContainer{
    {
        sizeof(tContainerWidget),
        nullptr,
        nullptr,
        nullptr,
        mDisplayDrv.get(),
        {
            5, 5, 122, 122
        },
        ContainerMsgProc
    },
    CTR_STYLE_OUTLINE | CTR_STYLE_TEXT | CTR_STYLE_TEXT_OPAQUE,
    ClrBlack, ClrWhite, ClrWhite,
    &amp;g_sFontFixed6x8,
    &quot;Config Menu&quot;
};

auto lDoNothing{
    [](tWidget* const /*psWidget*/) noexcept
    {
        // Send event for manual feed.
        // In fact, should hold, so how to manage this?
    }
};

static const std::array&lt;tPushButtonWidget, 3&gt; sCfgButtons{
    {
        {
            {
                sizeof(tPushButtonWidget),
                reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tContainerWidget*&gt;(&amp;sTopContainer)),
                reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tPushButtonWidget*&gt;(&amp;sCfgButtons[1])),
                nullptr,
                mDisplayDrv.get(),
                {
                    20, 20, 100, 40
                },
                RectangularButtonMsgProc
            },
            PB_STYLE_OUTLINE | PB_STYLE_TEXT | PB_STYLE_PRESSED,
            ClrBlack, ClrWhite, ClrWhite, ClrWhite,
            &amp;g_sFontFixed6x8,
            &quot;Feed Config&quot;,
            nullptr, nullptr,
            0, 0, 0,
            lDoNothing
        },
        {
            {
                sizeof(tPushButtonWidget),
                reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tContainerWidget*&gt;(&amp;sTopContainer)),
                reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tPushButtonWidget*&gt;(&amp;sCfgButtons[2])),
                nullptr,
                mDisplayDrv.get(),
                {
                    20, 60, 100, 80
                },
                RectangularButtonMsgProc
            },
            PB_STYLE_OUTLINE | PB_STYLE_TEXT,
            ClrBlack, ClrWhite, ClrWhite, ClrWhite,
            &amp;g_sFontFixed6x8,
            &quot;Calendar&quot;,
            nullptr, nullptr,
            0, 0, 0,
            lDoNothing
        },
        {
            {
                sizeof(tPushButtonWidget),
                reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tContainerWidget*&gt;(&amp;sTopContainer)),
                nullptr,
                nullptr,
                mDisplayDrv.get(),
                {
                    20, 80, 100, 100
                },
                RectangularButtonMsgProc
            },
            PB_STYLE_OUTLINE | PB_STYLE_TEXT,
            ClrBlack, ClrWhite, ClrWhite, ClrWhite,
            &amp;g_sFontFixed6x8,
            &quot;About&quot;,
            nullptr, nullptr,
            0, 0, 0,
            lDoNothing
        }
    }
};

sTopContainer.sBase.psChild = reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tPushButtonWidget*&gt;(&amp;sCfgButtons[0]));
WidgetPaint(reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tContainerWidget*&gt;(&amp;sTopContainer)));
static const QP::QEvt sDrawEvent{GUI_DRAW_SIG};
POST(&amp;sDrawEvent, this);
</code>
   </operation>
   <operation name="DrawAboutMenu" type="void" visibility="0x02" properties="0x00">
    <specifiers>noexcept</specifiers>
    <documentation>Draw the about menu.</documentation>
    <code>static tContainerWidget sTopContainer{
    {
        sizeof(tContainerWidget),
        nullptr,
        nullptr,
        nullptr,
        mDisplayDrv.get(),
        {
            5, 5, 122, 122
        },
        ContainerMsgProc
    },
    CTR_STYLE_OUTLINE | CTR_STYLE_TEXT | CTR_STYLE_TEXT_OPAQUE,
    ClrBlack, ClrWhite, ClrWhite,
    &amp;g_sFontFixed6x8,
    &quot;About&quot;
};

WidgetPaint(reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tContainerWidget*&gt;(&amp;sTopContainer)));
static const QP::QEvt sDrawEvent{GUI_DRAW_SIG};
POST(&amp;sDrawEvent, this);
</code>
   </operation>
   <operation name="DrawFeedMenu" type="void" visibility="0x02" properties="0x00">
    <specifiers>noexcept</specifiers>
    <documentation>Draw the Feed Config menu.</documentation>
    <code>static tContainerWidget sTopContainer{
    {
        sizeof(tContainerWidget),
        nullptr,
        nullptr,
        nullptr,
        mDisplayDrv.get(),
        {
            5, 5, 122, 122
        },
        ContainerMsgProc
    },
    CTR_STYLE_OUTLINE | CTR_STYLE_TEXT | CTR_STYLE_TEXT_OPAQUE,
    ClrBlack, ClrWhite, ClrWhite,
    &amp;g_sFontFixed6x8,
    &quot;Feed Config&quot;
};
WidgetPaint(reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tContainerWidget*&gt;(&amp;sTopContainer)));
static const QP::QEvt sDrawEvent{GUI_DRAW_SIG};
POST(&amp;sDrawEvent, this);
</code>
   </operation>
   <operation name="DrawCalendarMenu" type="void" visibility="0x02" properties="0x00">
    <specifiers>noexcept</specifiers>
    <documentation>Draw the Calendar menu.</documentation>
    <code>static tContainerWidget sTopContainer{
    {
        sizeof(tContainerWidget),
        nullptr,
        nullptr,
        nullptr,
        mDisplayDrv.get(),
        {
            5, 5, 122, 122
        },
        ContainerMsgProc
    },
    CTR_STYLE_OUTLINE | CTR_STYLE_TEXT | CTR_STYLE_TEXT_OPAQUE,
    ClrBlack, ClrWhite, ClrWhite,
    &amp;g_sFontFixed6x8,
    &quot;Feed Calendar&quot;
};
WidgetPaint(reinterpret_cast&lt;tWidget*&gt;(const_cast&lt;tContainerWidget*&gt;(&amp;sTopContainer)));
static const QP::QEvt sDrawEvent{GUI_DRAW_SIG};
POST(&amp;sDrawEvent, this);
</code>
   </operation>
   <statechart properties="0x02">
    <initial target="../1">
     <action>static_cast&lt;void&gt;(e);</action>
     <initial_glyph conn="4,4,5,0,4,4">
      <action box="0,-2,18,5"/>
     </initial_glyph>
    </initial>
    <state name="GUIMgr">
     <documentation>Manager for the  GUI and graphics library.</documentation>
     <entry brief="Init();">#if 0
// Initialize the whole library.
static constexpr tGrLibDefaults sGrLibDefaults{
    .pfnStringRenderer{GrDefaultStringRenderer},
    .pCodePointMapTable{nullptr},
    .ui16Codepage{0},
    .ui8NumCodePointMaps{0},
    .ui8Reserved{0}
};
GrLibInit(&amp;sGrLibDefaults);
#endif

// Initialize required contextes.
// [MG] TROUVER MOYEN D&quot;AVOIR LE POINTEUR SUR tDisplay.

GrContextInit(&amp;mContext, mDisplayDrv.get());
GrContextForegroundSet(&amp;mContext, ClrWhite);
GrContextBackgroundSet(&amp;mContext, ClrBlack);
GrContextFontSet(&amp;mContext, &amp;g_sFontFixed6x8);

//GrImageDraw(&amp;mContext, sCatImg, 0, 0);
//GrStringDraw(&amp;mContext, &quot;Hello&quot;, sizeof(&quot;Hello&quot;), 0, 0, false);
//GrFlush(&amp;mContext);

//GrStringDraw(&amp;mContext, &quot;Hello&quot;, sizeof(&quot;Hello&quot;), 0, 40, false);
//GrFlush(&amp;mContext);

//GrLineDrawH(&amp;mContext, 0, 60, 80);
//GrFlush(&amp;mContext);

RectangularButtonInit(
    &amp;mManualFeedButton,
    mDisplayDrv.get(),
    40, 64, 40, 20
);</entry>
     <initial target="../6">
      <initial_glyph conn="8,30,5,0,8,6">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <tran trig="TERMINATE">
      <tran_glyph conn="178,8,0,-1,-6,6">
       <action box="-6,-8,10,2"/>
      </tran_glyph>
     </tran>
     <tran trig="GUI_DRAW">
      <action brief="QueueProc()">WidgetMessageQueueProcess();
GrFlush(&amp;mContext);</action>
      <tran_glyph conn="4,22,3,-1,46">
       <action box="0,-2,20,2"/>
      </tran_glyph>
     </tran>
     <state name="FeedCfgMenu">
      <documentation>Feed configuration sub-menu.</documentation>
      <entry brief="DrawFeedCfgmenu()"/>
      <exit brief="ClrScreen()"/>
      <initial target="../2">
       <initial_glyph conn="114,22,5,0,4,2">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <state name="TimedFeedPeriod">
       <documentation>To set the manual feed period.</documentation>
       <tran trig="GUI_SELECT" target="../../3">
        <tran_glyph conn="150,44,3,1,-10">
         <action box="-10,-2,12,3"/>
        </tran_glyph>
       </tran>
       <state_glyph node="150,38,24,10"/>
      </state>
      <state name="ManualfeedWaitPeriod">
       <documentation>To set the manual feed period.</documentation>
       <tran trig="GUI_SELECT" target="../../4">
        <tran_glyph conn="140,30,1,3,10">
         <action box="0,-2,12,3"/>
        </tran_glyph>
       </tran>
       <state_glyph node="116,24,24,10"/>
      </state>
      <state name="QuitFeedCfg">
       <documentation>To return one menu level up.</documentation>
       <tran trig="GUI_SELECT" target="../../2">
        <tran_glyph conn="128,38,0,2,-4">
         <action box="0,-3,12,3"/>
        </tran_glyph>
       </tran>
       <tran trig="GUI_ENTER" target="../../../5/1">
        <tran_glyph conn="116,44,3,1,-12,12,-18">
         <action box="-12,-2,10,3"/>
        </tran_glyph>
       </tran>
       <state_glyph node="116,38,24,10"/>
      </state>
      <state name="ManualFeedMaxfeedPeriod">
       <documentation>To set the manual feed maximum period.</documentation>
       <tran trig="GUI_SELECT" target="../../1">
        <tran_glyph conn="162,34,2,0,4">
         <action box="0,1,12,3"/>
        </tran_glyph>
       </tran>
       <state_glyph node="150,24,24,10"/>
      </state>
      <state_glyph node="110,14,70,40">
       <entry box="1,2,20,2"/>
       <exit box="1,4,20,2"/>
      </state_glyph>
     </state>
     <state name="CalendarMenu">
      <documentation>Calendar configuration sub-menu.</documentation>
      <entry brief="DrawCalendarMenu()"/>
      <exit brief="ClrScreen()"/>
      <initial target="../2">
       <initial_glyph conn="114,68,5,0,4,2">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <state name="QuitCalendar">
       <documentation>To return one menu level up.</documentation>
       <tran trig="GUI_ENTER" target="../../../5/2">
        <tran_glyph conn="116,94,3,1,-10,-20,-20">
         <action box="-10,-2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="GUI_SELECT" target="../../2">
        <tran_glyph conn="138,90,0,2,-6">
         <action box="0,-4,12,3"/>
        </tran_glyph>
       </tran>
       <state_glyph node="116,90,28,6"/>
      </state>
      <state name="SetEntry">
       <documentation>Set the various entries of the calendar.</documentation>
       <tran trig="GUI_SELECT" target="../../1">
        <tran_glyph conn="122,84,2,0,6">
         <action box="0,2,12,3"/>
        </tran_glyph>
       </tran>
       <state_glyph node="116,70,58,14"/>
      </state>
      <state_glyph node="110,60,70,40">
       <entry box="1,2,19,2"/>
       <exit box="1,4,19,2"/>
      </state_glyph>
     </state>
     <state name="ConfigMenu">
      <documentation>The main menu</documentation>
      <entry brief="DrawCfgMenu()"/>
      <exit brief="ClrScreen()"/>
      <initial target="../1">
       <initial_glyph conn="64,44,5,0,6,4">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <state name="SelectFeedCfg">
       <documentation>Highlight/select the Feed config sub-menu.</documentation>
       <entry brief="SelectLine()"/>
       <exit brief="DeselectLine()"/>
       <tran trig="GUI_SELECT" target="../../2">
        <tran_glyph conn="76,58,2,0,8">
         <action box="-10,2,12,3"/>
        </tran_glyph>
       </tran>
       <tran trig="GUI_ENTER" target="../../../3">
        <tran_glyph conn="86,54,1,3,14,-24,10">
         <action box="0,-2,12,3"/>
        </tran_glyph>
       </tran>
       <state_glyph node="66,48,20,10">
        <entry box="1,2,15,2"/>
        <exit box="1,4,15,2"/>
       </state_glyph>
      </state>
      <state name="SelectCalendarRec">
       <documentation>Highlight/select the calendar record sub-menu.</documentation>
       <entry brief="SelectLine()"/>
       <exit brief="DeselectLine()"/>
       <tran trig="GUI_ENTER" target="../../../4">
        <tran_glyph conn="86,72,1,3,24">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <tran trig="GUI_SELECT" target="../../3">
        <tran_glyph conn="76,76,2,0,8">
         <action box="-10,3,12,3"/>
        </tran_glyph>
       </tran>
       <state_glyph node="66,66,20,10">
        <entry box="1,2,14,2"/>
        <exit box="1,4,14,2"/>
       </state_glyph>
      </state>
      <state name="SelectAbout">
       <documentation>Highlight/select the about sub-menu.</documentation>
       <entry brief="SelectLine()"/>
       <exit brief="SeselectLine()"/>
       <tran trig="GUI_SELECT" target="../../4">
        <tran_glyph conn="76,94,2,0,8">
         <action box="-10,3,12,3"/>
        </tran_glyph>
       </tran>
       <tran trig="GUI_ENTER" target="../../../7">
        <tran_glyph conn="86,90,1,3,16,21,8">
         <action box="0,-2,10,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="66,84,20,10">
        <entry box="1,2,15,2"/>
        <exit box="1,4,15,2"/>
       </state_glyph>
      </state>
      <state name="Quit">
       <documentation>Highlight/select the quit option.</documentation>
       <entry brief="SelectOption()"/>
       <exit brief="DeselectOption()"/>
       <tran trig="GUI_ENTER" target="../../../6/2">
        <tran_glyph conn="66,110,3,1,-18,-18,-12">
         <action box="-18,0,12,3"/>
        </tran_glyph>
       </tran>
       <tran trig="GUI_SELECT" target="../../1">
        <tran_glyph conn="66,107,3,3,-4,-53,4">
         <action box="-10,-56,12,3"/>
        </tran_glyph>
       </tran>
       <state_glyph node="66,102,20,10">
        <entry box="1,2,14,2"/>
        <exit box="1,4,14,2"/>
       </state_glyph>
      </state>
      <state_glyph node="58,36,36,80">
       <entry box="1,2,17,2"/>
       <exit box="1,4,17,2"/>
      </state_glyph>
     </state>
     <state name="Splash">
      <documentation>Splash screen.</documentation>
      <entry brief="DisplaySplash()">// Draw the menu here?
DrawMainMenu();</entry>
      <exit brief="ClrScreen()"/>
      <initial target="../3">
       <initial_glyph conn="16,44,5,0,6,4">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <state name="TimedFeed">
       <documentation>A button for timed feed.</documentation>
       <entry brief="FocusButton()"/>
       <exit brief="UnfocusButton()"/>
       <tran trig="GUI_SELECT" target="../../2">
        <tran_glyph conn="26,76,2,0,8">
         <action box="-10,3,12,3"/>
        </tran_glyph>
       </tran>
       <state_glyph node="16,66,20,10">
        <entry box="1,2,15,2"/>
        <exit box="1,4,15,2"/>
       </state_glyph>
      </state>
      <state name="SelectConfigMenu">
       <documentation>Option to move to main config menu.</documentation>
       <entry brief="SelectOption()"/>
       <exit brief="DeselectOption()"/>
       <tran trig="GUI_SELECT" target="../../3">
        <tran_glyph conn="26,94,2,3,4,-14,-46,4">
         <action box="-13,4,13,3"/>
        </tran_glyph>
       </tran>
       <tran trig="GUI_ENTER" target="../../../5">
        <tran_glyph conn="36,90,1,3,20,10,2">
         <action box="0,-2,12,3"/>
        </tran_glyph>
       </tran>
       <state_glyph node="16,84,20,10">
        <entry box="1,2,15,2"/>
        <exit box="1,4,15,2"/>
       </state_glyph>
      </state>
      <state name="ManualFeed">
       <documentation>A button for manual feed.</documentation>
       <entry brief="FocusButton()"/>
       <exit brief="UnfocusButton()"/>
       <tran trig="GUI_SELECT" target="../../1">
        <tran_glyph conn="26,58,2,0,8">
         <action box="-10,3,11,3"/>
        </tran_glyph>
       </tran>
       <state_glyph node="16,48,20,10">
        <entry box="1,2,15,2"/>
        <exit box="1,4,15,2"/>
       </state_glyph>
      </state>
      <state_glyph node="8,36,36,80">
       <entry box="1,2,16,2"/>
       <exit box="1,4,16,3"/>
      </state_glyph>
     </state>
     <state name="About">
      <documentation>The about sub-menu.</documentation>
      <entry brief="DrawAboutMenu(()"/>
      <exit brief="ClrScreen()"/>
      <tran trig="GUI_ENTER" target="../../5/3">
       <tran_glyph conn="110,114,3,1,-12,-22,-12">
        <action box="-12,0,12,3"/>
       </tran_glyph>
      </tran>
      <state_glyph node="110,106,20,10">
       <entry box="1,2,17,2"/>
       <exit box="1,4,17,2"/>
      </state_glyph>
     </state>
     <state_glyph node="4,8,180,112">
      <entry box="1,2,9,2"/>
     </state_glyph>
    </state>
    <state_diagram size="188,124"/>
   </statechart>
  </class>
 </package>
 <package name="Events" stereotype="0x01" namespace="Event::"/>
</package>
