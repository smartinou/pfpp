<?xml version="1.0" encoding="UTF-8"?>
<model version="5.2.5" links="0">
 <framework name="qpcpp"/>
 <package name="BSP" stereotype="0x02" namespace="BSP::">
  <package name="Events" stereotype="0x01" namespace="Event::">
   <class name="ButtonEvt" superclass="qpcpp::QEvt">
    <documentation>Event for a button preseed/released.</documentation>
    <attribute name="mIsActive" type="bool" visibility="0x00" properties="0x00">
     <documentation>True if pressed, false if released.</documentation>
    </attribute>
   </class>
   <class name="QSPYProcBlock" superclass="qpcpp::QEvt">
    <documentation>Event for processing an outgoing block of QSPY data.</documentation>
    <attribute name="mBlock" type="const uint8_t*" visibility="0x00" properties="0x00">
     <documentation>The pointer to the data of the block.</documentation>
    </attribute>
    <attribute name="mSize" type="uint16_t" visibility="0x00" properties="0x00">
     <documentation>The size of the data in the block.</documentation>
    </attribute>
   </class>
   <class name="DailyTimeEntry" superclass="qpcpp::QEvt">
    <documentation>Specifies a time entry for a daily calendar.</documentation>
    <attribute name="mTime" type="std::chrono::minutes" visibility="0x00" properties="0x00">
     <documentation>The time to set in the calendar.</documentation>
    </attribute>
   </class>
  </package>
 </package>
 <package name="project" stereotype="0x02" namespace="PFPP::">
  <class name="FeederCfg">
   <documentation>A struct containing all the Feeder configuration parameters.</documentation>
   <attribute name="mManualFeedWaitPeriod" type="std::chrono::milliseconds" visibility="0x00" properties="0x00">
    <documentation>The wait period before starting the feeder.</documentation>
   </attribute>
   <attribute name="mManualFeedMaxFeedPeriod" type="std::chrono::milliseconds" visibility="0x00" properties="0x00">
    <documentation>The time cap for manual feed.</documentation>
   </attribute>
   <attribute name="mTimedFeedPeriod" type="std::chrono::milliseconds" visibility="0x00" properties="0x00">
    <documentation>The feeding time for timed feeding.</documentation>
   </attribute>
   <attribute name="mIsManualFeedEnable" type="bool" visibility="0x00" properties="0x00">
    <documentation>Allows manual feed events to be passed to feeder.</documentation>
   </attribute>
   <attribute name="mIsTimedFeedEnable" type="bool" visibility="0x00" properties="0x00">
    <documentation>Allows timed feed events to be passed to feeder.</documentation>
   </attribute>
   <operation name="FeederCfg" type="" visibility="0x00" properties="0x02">
    <specifiers>noexcept</specifiers>
    <documentation>Ctor</documentation>
    <code>    : mManualFeedWaitPeriod{2000ms}
    , mManualFeedMaxFeedPeriod{5000ms}
    , mTimedFeedPeriod{4000ms}
    , mIsManualFeedEnable{true}
    , mIsTimedFeedEnable{true}

// Ctor body.</code>
   </operation>
  </class>
  <package name="HSMs" stereotype="0x00" namespace="HSM::">
   <class name="Feeder" superclass="qpcpp::QHsm">
    <documentation>The Feeder AO for the project.

This is where all the feeding actions are taken, based on &quot;feeding&quot; events.</documentation>
    <attribute name="mOwner" type="QP::QActive* const" visibility="0x02" properties="0x00">
     <documentation>Back pointer to the QActive object owner of this QHSM.
Raw pointer: no ownership. Should it be weak-pointer?</documentation>
    </attribute>
    <attribute name="mFeedTimer" type="QP::QTimeEvt" visibility="0x02" properties="0x00">
     <documentation>Timer for fixed and time-capped feeding periods.</documentation>
    </attribute>
    <attribute name="mMotorControl" type="std::unique_ptr&lt;Drivers::IMotorControl&gt;" visibility="0x02" properties="0x00">
     <documentation>Motor controller for activating feeder.</documentation>
    </attribute>
    <attribute name="mManualFeedMaxFeedPeriod" type="QP::QTimeEvtCtr" visibility="0x02" properties="0x00">
     <documentation>The time cap for manual feed.</documentation>
    </attribute>
    <attribute name="mDeferredEventQueueSto[4] {}" type="const QP::QEvt*" visibility="0x02" properties="0x00">
     <documentation>Queue of deferred events.</documentation>
    </attribute>
    <attribute name="mDeferredEventQueue {}" type="QP::QEQueue" visibility="0x02" properties="0x00">
     <documentation>The queue of deferred events.</documentation>
    </attribute>
    <operation name="Feeder" type="" visibility="0x00" properties="0x00">
     <specifiers>noexcept</specifiers>
     <documentation>Ctor</documentation>
     <parameter name="aOwner" type="QP::QActive* const"/>
     <parameter name="aMotorControl" type="std::unique_ptr&lt;Drivers::IMotorControl&gt;"/>
     <code>    : QP::QHsm(Q_STATE_CAST(&amp;PFPP::HSM::Feeder::initial))
    , mOwner{aOwner}
    , mFeedTimer{aOwner, FEEDER_TIMEOUT_SIG, 0U}
    , mMotorControl{std::move(aMotorControl)}
    , mManualFeedMaxFeedPeriod{0}

// Ctor body.</code>
    </operation>
    <operation name="StartTimedFeed" type="void" visibility="0x02" properties="0x00">
     <specifiers>noexcept</specifiers>
     <documentation>Starts a timed feeding period.</documentation>
     <parameter name="aFeedTime" type="const QP::QTimeEvtCtr"/>
     <code>mFeedTimer.armX(aFeedTime);
StartFeeder();</code>
    </operation>
    <operation name="StopTimedFeed" type="void" visibility="0x02" properties="0x00">
     <specifiers>noexcept</specifiers>
     <documentation>Stop timed feeding period.</documentation>
     <code>StopFeeder();
mFeedTimer.disarm();</code>
    </operation>
    <operation name="StartFeeder" type="void" visibility="0x02" properties="0x00">
     <specifiers>const noexcept</specifiers>
     <documentation>Start whatever mechanism used to distribute food.</documentation>
     <code>// Start motor.
mMotorControl-&gt;TurnOnCW();</code>
    </operation>
    <operation name="StopFeeder" type="void" visibility="0x02" properties="0x00">
     <specifiers>const noexcept</specifiers>
     <documentation>Stops whatever mechanism is used to distribute food.</documentation>
     <code>// Stop feeder.
mMotorControl-&gt;TurnOff();</code>
    </operation>
    <statechart properties="0x02">
     <initial target="../1">
      <action brief="Init();">static_cast&lt;void&gt;(e);
StopFeeder();

// Initialize the QF queue for deferred feed requests.
mDeferredEventQueue.init(mDeferredEventQueueSto, Q_DIM(mDeferredEventQueueSto));
</action>
      <initial_glyph conn="4,6,5,0,8,6">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <state name="Running">
      <documentation>Top state.</documentation>
      <initial target="../5">
       <initial_glyph conn="32,18,5,0,6,6">
        <action box="0,-2,10,2"/>
       </initial_glyph>
      </initial>
      <tran trig="FEEDER_TIMEOUT" target="../5">
       <tran_glyph conn="4,28,3,3,28">
        <action box="0,-2,22,2"/>
       </tran_glyph>
      </tran>
      <tran trig="FEEDER_MANUAL_FEED_CMD">
       <action brief="GetState();">const auto lEvent {static_cast&lt;const PFPP::Event::Feeder::ManualFeedCmd*&gt;(e)};
</action>
       <choice target="../../6">
        <guard brief="(State == On)">(lEvent-&gt;mIsActive == true)</guard>
        <action brief="StartTimer(WaitTime); SaveMaxFeedTime();">mManualFeedMaxFeedPeriod = lEvent-&gt;mMaxFeedPeriod;
mFeedTimer.armX(lEvent-&gt;mWaitPeriod);</action>
        <choice_glyph conn="14,46,5,3,18">
         <action box="1,-8,16,6"/>
        </choice_glyph>
       </choice>
       <choice target="../../5">
        <guard brief="else"/>
        <choice_glyph conn="14,46,4,3,-16,18">
         <action box="0,-16,10,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,46,3,-1,10">
        <action box="0,1,25,4"/>
       </tran_glyph>
      </tran>
      <tran trig="FEEDER_TIMED_FEED_CMD" target="../7">
       <action brief="StartTimer(FeedTime); StartFeeder();">const auto lEvent {static_cast&lt;const PFPP::Event::Feeder::TimedFeedCmd*&gt;(e)};
StartTimedFeed(lEvent-&gt;mFeedPeriod);</action>
       <tran_glyph conn="4,88,3,3,28">
        <action box="0,-4,28,4"/>
       </tran_glyph>
      </tran>
      <tran trig="TERMINATE">
       <action brief="Stop();"/>
       <tran_glyph conn="72,12,0,-1,-6,8">
        <action box="0,-6,10,4"/>
       </tran_glyph>
      </tran>
      <state name="Waiting">
       <documentation>// Waiting here for anything to happen.</documentation>
       <entry brief="Recall();">mOwner-&gt;recall(&amp;mDeferredEventQueue);</entry>
       <state_glyph node="32,24,48,8">
        <entry box="1,2,13,2"/>
       </state_glyph>
      </state>
      <state name="ManualFeed">
       <documentation>Feeding state triggered by manual action.</documentation>
       <exit brief="StopFeeder(); StopTimer();">StopTimedFeed();</exit>
       <initial target="../2">
        <initial_glyph conn="44,42,5,0,4,4">
         <action box="0,-2,10,2"/>
        </initial_glyph>
       </initial>
       <tran trig="FEEDER_TIMED_FEED_CMD">
        <action brief="Defer();">if (mOwner-&gt;defer(&amp;mDeferredEventQueue, e)) {
    // Event deferred: log event.
}
else {
    // Event NOT deferred because of no room in the defer queue: Log event.
}
</action>
        <tran_glyph conn="32,74,3,-1,40">
         <action box="0,-2,40,2"/>
        </tran_glyph>
       </tran>
       <state name="WaitPeriod">
        <documentation>The wait period before starting the feeder.</documentation>
        <tran trig="FEEDER_TIMEOUT" target="../../3">
         <tran_glyph conn="42,50,3,0,-4,12,4">
          <action box="-4,5,20,2"/>
         </tran_glyph>
        </tran>
        <state_glyph node="42,46,34,8"/>
       </state>
       <state name="TimedCappedFeed">
        <documentation>The feeding state for a manual feed.
Has a time limit to avoid over-feeding and emptying the feeder.</documentation>
        <entry brief="StartTimer(MaxFeedTime); StartFeeder();">StartTimedFeed(mManualFeedMaxFeedPeriod);</entry>
        <state_glyph node="42,58,34,8">
         <entry box="1,2,33,4"/>
        </state_glyph>
       </state>
       <state_glyph node="32,36,48,42">
        <exit box="1,2,26,2"/>
       </state_glyph>
      </state>
      <state name="TimedFeed">
       <documentation>State describing behavior for events triggering a fixed timed feeding period.</documentation>
       <exit brief="StopFeeder(); StopTimer();">StopTimedFeed();</exit>
       <tran trig="FEEDER_TIMED_FEED_CMD">
        <action brief="DoNothing();">// Intercept this signal discard it.
// We consider this ok since we're already in a timed feeding sequence.</action>
        <tran_glyph conn="32,92,3,-1,40">
         <action box="0,-2,40,2"/>
        </tran_glyph>
       </tran>
       <tran trig="FEEDER_MANUAL_FEED_CMD">
        <action brief="DoNothing();">// Discard any manual feeding action while we're already in a timed feeding sequence.</action>
        <tran_glyph conn="32,96,3,-1,40">
         <action box="0,-2,40,2"/>
        </tran_glyph>
       </tran>
       <state_glyph node="32,82,48,18">
        <exit box="1,2,31,2"/>
       </state_glyph>
      </state>
      <state_glyph node="4,12,80,92"/>
     </state>
     <state_diagram size="88,108"/>
    </statechart>
   </class>
  </package>
  <package name="AOs" stereotype="0x02" namespace="AO::">
   <class name="Mgr" superclass="qpcpp::QActive">
    <documentation>The AO that acts as the manager for the whole application.

-Intercepts button signals and translate them into feeding signals.
-Translates calendar alarm events into feeding signals.
-Perform logging,
-Updates display.</documentation>
    <attribute name="mAlarmID" type="unsigned int" visibility="0x02" properties="0x00">
     <documentation>An index used to identify this alarm.</documentation>
    </attribute>
    <attribute name="mFeeder" type="PFPP::HSM::Feeder" visibility="0x02" properties="0x00">
     <documentation>The orthogonal feeder component.</documentation>
    </attribute>
    <attribute name="mFeederCfg" type="PFPP::FeederCfg" visibility="0x02" properties="0x00">
     <documentation>Holds the configuration parameters for the feeder.</documentation>
    </attribute>
    <attribute name="mToTicksFct" type="ToTicksFct" visibility="0x02" properties="0x00">
     <documentation>Reference to function that converts ms to BSP ticks.</documentation>
    </attribute>
    <attribute name="mDailyPlanner {}" type="DailyPlanner&lt;std::chrono::seconds&gt;" visibility="0x02" properties="0x00">
     <documentation>A daily planner for feeding the beast.</documentation>
    </attribute>
    <operation name="Mgr" type="" visibility="0x00" properties="0x00">
     <specifiers>noexcept</specifiers>
     <documentation>Ctor.</documentation>
     <parameter name="aAlarmID" type="const unsigned int"/>
     <parameter name="aMotorControl" type="std::unique_ptr&lt;Drivers::IMotorControl&gt;"/>
     <parameter name="aToTicksFct" type="const ToTicksFct&amp;"/>
     <code>    : QP::QActive{Q_STATE_CAST(&amp;PFPP::AO::Mgr::initial)}
    , mAlarmID{aAlarmID}
    , mFeeder{this, std::move(aMotorControl)}
    , mFeederCfg{}
    , mToTicksFct{aToTicksFct}

// Ctor body.</code>
    </operation>
    <operation name="SetNextAlarm" type="void" visibility="0x02" properties="0x02">
     <specifiers>const</specifiers>
     <documentation>Sets the next alarm according to entries in daily calendar.
Cancels existing alarm if none available.</documentation>
     <code>const auto lAlarmTimeEvt {Q_NEW(RTCC::Event::AlarmTime, RTCC_SET_ALARM_SIG)};

lAlarmTimeEvt-&gt;mID = mAlarmID;
lAlarmTimeEvt-&gt;mIsSelfCleared = true;
lAlarmTimeEvt-&gt;mAlarmRate = eAlarmRate::HoursMinutesMatch;
lAlarmTimeEvt-&gt;mGetAlarmTimeFct = StaticGetNextAlarm;
lAlarmTimeEvt-&gt;mParam = this;

#if Q_SPY
static const uint8_t sSetNextAlarm = 0U;
#endif

QP::QF::PUBLISH(lAlarmTimeEvt, &amp;sSetNextAlarm);
</code>
    </operation>
    <operation name="DispatchTimedFeedEvent" type="void" visibility="0x02" properties="0x00">
     <documentation>Creates and dispatches timed feed event to Feeder.</documentation>
     <code>auto const lTimedFeedEvt {
    Q_NEW(PFPP::Event::Feeder::TimedFeedCmd, FEEDER_TIMED_FEED_CMD_SIG)
};

lTimedFeedEvt-&gt;mFeedPeriod = mToTicksFct(mFeederCfg.mTimedFeedPeriod);

uint_fast8_t sTimedFeedButton_Handler {0U};
mFeeder.dispatch(lTimedFeedEvt, sTimedFeedButton_Handler);
</code>
    </operation>
    <operation name="DispatchManualFeedEvent" type="void" visibility="0x02" properties="0x00">
     <documentation>Creates and dispatches manual feed event to Feeder.</documentation>
     <parameter name="aIsActive" type="const bool"/>
     <code>auto const lManualFeedEvt {
    Q_NEW(PFPP::Event::Feeder::ManualFeedCmd, FEEDER_MANUAL_FEED_CMD_SIG)
};

lManualFeedEvt-&gt;mIsActive = aIsActive;
lManualFeedEvt-&gt;mWaitPeriod = mToTicksFct(mFeederCfg.mManualFeedWaitPeriod);
lManualFeedEvt-&gt;mMaxFeedPeriod = mToTicksFct(mFeederCfg.mManualFeedMaxFeedPeriod);

uint_fast8_t sManualFeedButton_Handler {0U};
mFeeder.dispatch(lManualFeedEvt, sManualFeedButton_Handler);
</code>
    </operation>
    <operation name="StaticGetNextAlarm" type="std::optional&lt;std::chrono::seconds&gt;" visibility="0x02" properties="0x01">
     <specifiers>noexcept</specifiers>
     <documentation>Static wrapper function for using in events.</documentation>
     <parameter name="aParam" type="void* const"/>
     <parameter name="aTime" type="const std::chrono::seconds"/>
     <code>const auto lThis {static_cast&lt;const PFPP::AO::Mgr*&gt;(aParam)};

return lThis-&gt;mDailyPlanner.GetNextEntry(aTime);</code>
    </operation>
    <statechart properties="0x00">
     <documentation>mFeeder.dispatch(e, 0);</documentation>
     <initial target="../1">
      <action brief="Init();">// Perform initial transition of Feeder QHSM orthogonal component.
mFeeder.init(e, std::uint_fast8_t {0});

subscribe(BSP_MANUAL_FEED_BUTTON_EVT_SIG);
subscribe(BSP_TIMED_FEED_BUTTON_EVT_SIG);</action>
      <initial_glyph conn="4,4,5,0,4,4">
       <action box="0,-2,9,2"/>
      </initial_glyph>
     </initial>
     <state name="Running">
      <documentation>The top running state.</documentation>
      <tran trig="TERMINATE">
       <action brief="Stop();">mFeeder.dispatch(e, 0);

// Requires QF_ACTIVE_STOP to be defined.
QP::QF::stop();</action>
       <tran_glyph conn="84,8,0,-1,-6,4">
        <action box="-10,-5,14,4"/>
       </tran_glyph>
      </tran>
      <tran trig="BSP_MANUAL_FEED_BUTTON_EVT">
       <action brief="Cast(e);">const auto lButtonEvent {static_cast&lt;const BSP::Event::ButtonEvt*&gt;(e)};</action>
       <choice>
        <guard brief="IsManualFeedEnable">mFeederCfg.mIsManualFeedEnable</guard>
        <action brief="DispatchManualFeedEvent();">DispatchManualFeedEvent(lButtonEvent-&gt;mIsActive);</action>
        <choice_glyph conn="32,16,5,-1,46">
         <action box="1,-2,44,2"/>
        </choice_glyph>
       </choice>
       <choice>
        <guard brief="else"/>
        <action brief="DoNothing();"/>
        <choice_glyph conn="32,16,4,-1,6,16">
         <action box="1,4,17,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,16,3,-1,28">
        <action box="0,-2,28,4"/>
       </tran_glyph>
      </tran>
      <tran trig="BSP_TIMED_FEED_BUTTON_EVT">
       <choice>
        <guard brief="IsTimedFeedEnable">mFeederCfg.mIsTimedFeedEnable</guard>
        <action brief="DispatchTimedFeedEvent();">DispatchTimedFeedEvent();</action>
        <choice_glyph conn="32,26,5,-1,46">
         <action box="1,-2,43,2"/>
        </choice_glyph>
       </choice>
       <choice>
        <guard brief="else"/>
        <action brief="DoNothing();"/>
        <choice_glyph conn="32,26,4,-1,6,16">
         <action box="1,4,15,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,26,3,-1,28">
        <action box="0,-2,28,2"/>
       </tran_glyph>
      </tran>
      <tran trig="FEEDER_TIMEOUT, FEEDER_MANUAL_FEED_CMD, FEEDER_TIMED_FEED_CMD">
       <action brief="Dispatch();">mFeeder.dispatch(e, 0);</action>
       <tran_glyph conn="4,38,3,-1,74">
        <action box="0,-2,74,2"/>
       </tran_glyph>
      </tran>
      <tran trig="RTCC_ALARM">
       <action brief="Cast(e);">const auto lAlarmFiredEvt {static_cast&lt;const RTCC::Event::AlarmFired*&gt;(e)};</action>
       <choice>
        <guard brief="ID == MyID">lAlarmFiredEvt-&gt;mID == mAlarmID</guard>
        <action brief="DispatchTimedFeedEvent(); SetNextAlarm();">static_cast&lt;void&gt;(lAlarmFiredEvt);

DispatchTimedFeedEvent();
SetNextAlarm();</action>
        <choice_glyph conn="32,50,5,-1,46">
         <action box="1,-2,45,2"/>
        </choice_glyph>
       </choice>
       <tran_glyph conn="4,50,3,-1,28">
        <action box="0,-2,14,4"/>
       </tran_glyph>
      </tran>
      <tran trig="BSP_SET_DAILY_FEED_TIME">
       <action brief="AddDailyEntry();">const auto lDailyEntryEvt {static_cast&lt;const BSP::Event::DailyTimeEntry*&gt;(e)};
mDailyPlanner.AddEntry(lDailyEntryEvt-&gt;mTime);
// [MG] THIS DOESN'T FORCE A NEW ALARM, SINCE WE DON'T KNOW THE CURRENT TIME.
</action>
       <tran_glyph conn="4,44,3,-1,74">
        <action box="0,-2,74,2"/>
       </tran_glyph>
      </tran>
      <tran trig="RTCC_SET_TIME, RTCC_SET_TIME_AND_DATE">
       <action brief="SetNextAlarm();">const auto lTimeAndDateEvt {static_cast&lt;const RTCC::Event::TimeAndDate*&gt;(e)};
static_cast&lt;void&gt;(lTimeAndDateEvt);

SetNextAlarm();</action>
       <tran_glyph conn="4,56,3,-1,74">
        <action box="0,-2,74,2"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,8,84,54"/>
     </state>
     <state_diagram size="92,66"/>
    </statechart>
   </class>
   <class name="BLE_AO" superclass="qpcpp::QActive">
    <documentation>The active object for the Bluetooth Low Energy (BLE).

Exchange data with the BLE module via SPI.</documentation>
    <attribute name="mBLE" type="BLE::IBLE &amp;" visibility="0x02" properties="0x00">
     <documentation>Reference to a IBLE-compatible interface.</documentation>
    </attribute>
    <operation name="BLE_AO" type="" visibility="0x00" properties="0x00">
     <documentation>Ctor.</documentation>
     <parameter name="aBLE" type="BLE::IBLE &amp;"/>
     <code>    : QP::QActive(Q_STATE_CAST(&amp;PFPP::AO::BLE_AO::initial))
    , mBLE(aBLE)

// Ctor body.</code>
    </operation>
    <statechart properties="0x02">
     <initial target="../1">
      <action brief="Init();">PFPP::Event::BLE::Init const * const lInitEvent = static_cast&lt;PFPP::Event::BLE::Init const * const&gt;(e);
mBLE.Init(lInitEvent-&gt;mRTCC_AO, lInitEvent-&gt;mCalendarRec, lInitEvent-&gt;mNetIFRec, lInitEvent-&gt;mFeedCfgRec);
</action>
      <initial_glyph conn="4,2,5,0,4,6">
       <action box="0,-2,10,2"/>
      </initial_glyph>
     </initial>
     <state name="Running">
      <documentation>The top Running state.</documentation>
      <tran trig="TERMINATE">
       <action brief="Stop();">// Requires QF_ACTIVE_STOP to be defined.
stop();</action>
       <tran_glyph conn="24,8,0,-1,-6,8">
        <action box="0,-5,11,4"/>
       </tran_glyph>
      </tran>
      <tran trig="BLE_INTERRUPT">
       <action brief="ReadStatus();">// Read status back from BLE host peripheral.
</action>
       <tran_glyph conn="4,14,3,-1,24">
        <action box="0,-2,22,4"/>
       </tran_glyph>
      </tran>
      <state_glyph node="4,8,28,16"/>
     </state>
     <state_diagram size="36,28"/>
    </statechart>
   </class>
  </package>
  <package name="Events" stereotype="0x01" namespace="Event::">
   <package name="Feeder" stereotype="0x01" namespace="Feeder::">
    <class name="TimedFeedCmd" superclass="qpcpp::QEvt">
     <documentation>An event for timed feed commands.</documentation>
     <attribute name="mFeedPeriod" type="QP::QTimeEvtCtr" visibility="0x00" properties="0x00">
      <documentation>Time to set the feeder to. </documentation>
     </attribute>
    </class>
    <class name="ManualFeedCmd" superclass="qpcpp::QEvt">
     <documentation>An event for manual feed commands.</documentation>
     <attribute name="mIsActive" type="bool" visibility="0x00" properties="0x00">
      <documentation>The state of the command: true when on, false when off.</documentation>
     </attribute>
     <attribute name="mWaitPeriod" type="QP::QTimeEvtCtr" visibility="0x00" properties="0x00">
      <documentation>The wait period before activating the feeder.</documentation>
     </attribute>
     <attribute name="mMaxFeedPeriod" type="QP::QTimeEvtCtr" visibility="0x00" properties="0x00">
      <documentation>The maximum allowed time to activate the timer.</documentation>
     </attribute>
    </class>
   </package>
   <package name="BLE" stereotype="0x01" namespace="BLE::">
    <class name="Init" superclass="qpcpp::QEvt">
     <documentation>Init event to pass to pseudo initial transition.</documentation>
     <attribute name="mRTCC_AO" type="std::shared_ptr&lt;RTCC::AO::RTCC_AO&gt; const" visibility="0x00" properties="0x00"/>
     <attribute name="mCalendarRec" type="CalendarRec * const" visibility="0x00" properties="0x00">
      <documentation>Pointer to Calendar record.</documentation>
     </attribute>
     <attribute name="mNetIFRec" type="NetIFRec * const" visibility="0x00" properties="0x00">
      <documentation>Pointer to Net IF record.</documentation>
     </attribute>
     <attribute name="mFeedCfgRec" type="FeedCfgRec * const" visibility="0x00" properties="0x00">
      <documentation>Pointer to Feeding config record.</documentation>
     </attribute>
     <operation name="Init" type="" visibility="0x00" properties="0x02">
      <documentation>// Event ctor.</documentation>
      <parameter name="aSig" type="QP::QSignal const"/>
      <parameter name="aRTCC_AO" type="std::shared_ptr&lt;RTCC::AO::RTCC_AO&gt; const"/>
      <parameter name="aCalendarRec" type="CalendarRec * const"/>
      <parameter name="aNetIFRec" type="NetIFRec * const"/>
      <parameter name="aFeedCfgRec" type="FeedCfgRec * const"/>
      <code>    : QP::QEvt(aSig)
    , mRTCC_AO(aRTCC_AO)
    , mCalendarRec(aCalendarRec)
    , mNetIFRec(aNetIFRec)
    , mFeedCfgRec(aFeedCfgRec)

// Ctor body.</code>
     </operation>
    </class>
   </package>
  </package>
  <directory name="../codegen">
   <file name="PFPP_Events.h">
    <text>#ifndef PFPP__EVENTS_H_
#define PFPP__EVENTS_H_


// QP.
#include &lt;qpcpp.hpp&gt;

// Standard libraries.
#include &lt;chrono&gt;


$declare${project::Events::Feeder::ManualFeedCmd}
$declare${project::Events::Feeder::TimedFeedCmd}


$declare${BSP::Events}

#endif // PFPP__EVENTS_H_
</text>
   </file>
   <file name="PFPP_HSMs.h">
    <text>#ifndef PFPP__HSM_FEEDER_H_
#define PFPP__HSM_FEEDER_H_


// Standard Library.
#include &lt;memory&gt;

// QP.
#include &lt;qpcpp.hpp&gt;

// Forward declarations.
namespace Drivers
{
    class IMotorControl;
}


$declare${project::HSMs::Feeder}

#endif // PFPP__HSM_FEEDER_H_
</text>
   </file>
   <file name="PFPP_HSMs.cpp">
    <text>// This project.
#include &quot;qp_ao/codegen/PFPP_HSMs.h&quot;
#include &quot;qp_ao/codegen/PFPP_Events.h&quot;
#include &quot;qp_ao/codegen/Signals.h&quot;

// Drivers.
#include &quot;drivers/inc/IMotorControl.h&quot;


$define${project::HSMs::Feeder}
</text>
   </file>
   <file name="PFPP_AOs.cpp">
    <text>// This project.
#include &quot;qp_ao/codegen/PFPP_AOs.h&quot;
#include &quot;qp_ao/codegen/PFPP_Events.h&quot;
#include &quot;qp_ao/codegen/Signals.h&quot;

#include &quot;qp_ao/codegen/RTCC_Events.h&quot;

// Drivers.
#include &quot;drivers/inc/IMotorControl.h&quot;


$define${project::AOs::Mgr}
</text>
   </file>
   <file name="PFPP_AOs.h">
    <text>#ifndef PFPP__AOS_MGR_H_
#define PFPP__AOS_MGR_H_


// Standard Library.
#include &lt;chrono&gt;
#include &lt;memory&gt;

// QP.
#include &lt;qpcpp.hpp&gt;

// Firmware.
#include &quot;inc/CalendarCfg.h&quot;

// This project.
#include &quot;PFPP_HSMs.h&quot;

// Forward declarations.
namespace Drivers
{
    class IMotorControl;
}

// Define function type to return number of ticks.
using namespace std::literals::chrono_literals;
using ToTicksFct = QP::QTimeEvtCtr (*)(std::chrono::milliseconds);


$declare${project::FeederCfg}

$declare${project::AOs::Mgr}


#endif // PFPP__AOS_MGR_H_
</text>
   </file>
   <file name="BLE_Events.h">
    <text>#include &lt;qpcpp.h&gt;


// Add Init event here if ever needed.
$declare${project::Events::BLE::Init}
</text>
   </file>
   <file name="BLE_AOs.h">
    <text>#include &lt;qpcpp.h&gt;


#include &quot;BLE.h&quot;
//#include &lt;db/FeedCfgRec.h&gt;


$declare${project::AOs::BLE_AO}
</text>
   </file>
   <file name="BLE_AOs.cpp">
    <text>#include &quot;BSP.h&quot;
#include &quot;Signals.h&quot;

//#include &quot;net/IPAddress.h&quot;

//#include &quot;Display_Events.h&quot;
//#include &quot;LwIP_Events.h&quot;
//#include &quot;RTCC_Events.h&quot;
//#include &quot;Logger.h&quot;

#include &quot;BLE_AOs.h&quot;
#include &quot;BLE_Events.h&quot;


$define${project::AOs::BLE_AO}
</text>
   </file>
   <file name="Signals.h">
    <text>#ifndef PFPPCODEGEN__SIGNALS_H_
#define PFPPCODEGEN__SIGNALS_H_

// Signals definitions for all packages in the project.

#include &lt;qpcpp.hpp&gt;


enum Signals
{
    // Feeder QHSM.
    FEEDER_TIMEOUT_SIG = QP::Q_USER_SIG,
    FEEDER_MANUAL_FEED_CMD_SIG,
    FEEDER_TIMED_FEED_CMD_SIG,
    FEEDER_LOG_SIG,
    FEEDER_LAST_SIG,

    // RTCC AO.
    RTCC_TICK_SIG,
    RTCC_ALARM_SIG,
    RTCC_SET_TIME_SIG,
    RTCC_SET_DATE_SIG,
    RTCC_SET_TIME_AND_DATE_SIG,
    RTCC_SET_ALARM_SIG,
    RTCC_CLEAR_ALARM_SIG,
    RTCC_INTERRUPT_SIG,

    // BSP signals.
    BSP_MANUAL_FEED_BUTTON_EVT_SIG,
    BSP_TIMED_FEED_BUTTON_EVT_SIG,
    BSP_SET_DAILY_FEED_TIME_SIG,

    BSP_QSPY_PROC_BLOCK_SIG,

    TERMINATE_SIG,
    QTY_SIG

};


#endif // PFPPCODEGEN__SIGNALS_H_
</text>
   </file>
  </directory>
 </package>
 <package file="./rtcc.qmp"/>
</model>
